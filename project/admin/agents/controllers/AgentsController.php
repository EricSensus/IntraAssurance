<?php

namespace Jenga\MyProject\Agents\Controllers;

use Jenga\App\Request\Input;
use Jenga\App\Request\Session;
use Jenga\App\Request\Url;
use Jenga\App\Views\Redirect;
use Jenga\MyProject\Agents\Models\AgentsModel;
use Jenga\MyProject\Agents\Views\AgentsView;
use Jenga\MyProject\Services\Charts;
use Jenga\App\Controllers\Controller;

use Jenga\MyProject\Elements;

/**
 * Class AgentsController
 * @package Jenga\MyProject\Agents\Controllers
 * @property-read AgentsModel $model
 * @property-read AgentsView $view
 */
class AgentsController extends Controller
{

    public function index()
    {

        if (is_null(Input::get('action')) && is_null(Input::post('action'))) {
            $action = 'getAgents';
        } else {

            if (!is_null(Input::get('action')))
                $action = Input::get('action');

            elseif (!is_null(Input::post('action')))
                $action = Input::post('action');
        }

        $this->$action();
    }

    public function getAgents()
    {

        $companies = $this->model->getAgents();

        $this->view->set('count', count($companies));
        $this->view->set('source', $companies);

        $this->view->generateMainTable();
    }

    public function getAgentByUserId($userid)
    {

        return $this->model->where('users_id', $userid)->first();
    }

    public function retrieveAgents($id = null)
    {
        return $this->model->getAgents($id);
    }

    public function add()
    {
        $this->view->agentForm();
    }

    public function edit()
    {

        $agent = $this->model->find(Input::get('id'))->data;
        $this->view->agentForm($agent);
    }

    public function saveAgent()
    {
        $this->view->disable();

        if (Input::post('id') != '')
            $agent = $this->model->find(Input::post('id'));
        else
            $agent = $this->model;

        $agent->names = Input::post('names');
        $agent->physical_location = Input::post('location');
        $agent->telephone_number = Input::post('telno');
        $agent->email_address = Input::post('email_address');

        $save = $agent->save();

        if ($agent->hasNoError()) {
            Redirect::withNotice($agent->names . ' has been saved. Please configure the agent\'s login details', 'success')
                ->to(Input::post('destination'));
        }
    }

    public function agentPerformance($settings = [])
    {

        $series = $this->model->getAgentAnalysis();

        //build the chart
        $chart = new Charts($settings);

        $chart->title('% Quotes generated by Agents');

        $chart->setup([
            'plotBackgroundColor' => 'null',
            'plotBorderWidth' => 'null',
            'plotShadow' => 'false'
        ]);

        $chart->tooltip([
            "pointFormat" => "'{series.name}: <b>{point.percentage:.1f}%</b>'"
        ]);

        $chart->plotOptions([
            $settings['type'] => [
                'allowPointSelect' => 'true',
                'cursor' => "'pointer'",
                'dataLabels' => [
                    'enabled' => 'false'
                ],
                'showInLegend' => 'true'
            ]
        ]);

        $seriesmethod = $settings['type'] . 'Series';
        $chart->$seriesmethod($series);

        $pie = $chart->build();

        $this->view->set('pie', $pie);
        $this->view->setViewPanel('agents-share');
    }

    public function delete()
    {

        if (!is_null(Input::get('id'))) {

            $id = Input::get('id');
            $delete = $this->model->where('id', '=', $id)->delete();
        } elseif (!is_null(Input::post('ids'))) {

            foreach (Input::post('ids') as $id) {
                $this->model->where('id', '=', $id)->delete();
            }
        }

        if (is_null($delete)) {

            $url = Url::route('/admin/setup');
            Redirect::withNotice('The agent has been deleted', 'success')
                ->to($url);
        }
    }

    public function configureAgentLogin($id = null)
    {
        $userelm = Elements::call('Users/UsersController');

        if (!is_null(Input::get('id')))
            $user = $userelm->model->getUserFromProfile(Input::get('id'), 'agents', '*');
        else
            $user = $userelm->model->getUserFromProfile($id, 'agents', '*');

        $login = $userelm->view->createLogin((is_null($user) ? Input::get('id') : $user), true, 'agents');
        $this->view->agentLoginForm($login);
    }

    public function getAllAgents($finder = null)
    {
        if (is_null($finder))
            return $this->model->all();
        else
            return $this->model->find($finder);
    }

    public function getAgentById($finder)
    {
        return $this->model->where('id', $finder)->first();
    }

    public function getLinkedAgent()
    {
        $customer = Elements::call('Customers/CustomersController')->model->getCustomerById(Session::get('customer_id'));
        $agent_id = $customer->insurer_agents_id;

        // get attached agent
        $agent = $this->model->where('id', $agent_id)->first();

        $this->view->linkedAgent($agent);
    }
}
